[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "InterBank",
  "enabled": 0,
  "modified": "2025-01-26 10:24:43.061139",
  "module": null,
  "name": "Customize indicator color for each status",
  "script": "frappe.listview_settings['InterBank'] = {\r\n    get_indicator(doc) {\r\n        // Customize indicator color for each status\r\n        if (doc.status == \"Deal\") {\r\n            return [__(\"Deal\"), \"blue\", \"status,=,Deal\"];\r\n        } else if (doc.status == \"Closed\") {\r\n            return [__(\"Closed\"), \"orange\", \"status,=,Closed\"];\r\n        } else if (doc.status == \"Waiting For Reply\") {\r\n            return [__(\"Waiting For Reply\"), \"red\", \"status,=,Waiting For Reply\"];\r\n        } else if (doc.status == \"On Sent\") {\r\n            return [__(\"On Sent\"), \"green\", \"status,=,On Sent\"];\r\n        }\r\n         else if (doc.status == \"Open\") {\r\n            return [__(\"Open\"), \"green\", \"status,=,Open\"];\r\n        }\r\n        \r\n    \r\n    },\r\n};\r\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request interbank",
  "enabled": 0,
  "modified": "2024-11-24 14:39:24.723979",
  "module": null,
  "name": "connection btn",
  "script": "// frappe.ui.form.on('Request interbank', {\n//     refresh(frm) {\n//         // First, manipulate the DOM to show the elements\n//         document.querySelectorAll(\".document-link-badge\").forEach((el) => {\n//             const dataDoctype = el.getAttribute(\"data-doctype\");\n\n//             if (dataDoctype === \"InterBank\") {\n//                 // Loop through each child of the current element (el)\n//                 Array.from(el.children).forEach(child => {\n//                     // Remove the 'hidden' class and add 'inline' and 'block' classes\n//                     child.classList.remove(\"hidden\");\n//                     child.classList.add(\"block\");\n//                     console.log(\"Added 'inline' and 'block' classes to:\", child);\n//                 });\n\n//                 // Get the reference for the count (interbank_reference)\n//                 let reference = el.querySelector(\".badge-link\").textContent.trim();\n           \n//               console.log(\"reference\",reference)\n//                 if (reference) {\n//                     // Get the count element inside .document-link-badge\n//                     let countElement = el.querySelector(\".count\");\n//                     console.log(\"sssssss\",existing.count)\n\n//                     // Push the count into the <span class=\"count\"> element\n//                     if (countElement) {\n//                         countElement.innerText = existing.count;  // Update the count text\n//                         console.log(\"Updated count to:\", existing.count);\n//                     }\n//                 }\n//             }\n\n//         // Then, update the external_links_found count (if needed)\n//         if (cur_frm && cur_frm.doc && cur_frm.dashboard_data && cur_frm.dashboard_data.count) {\n//             let externalLinks = cur_frm.dashboard_data.count.external_links_found;\n\n//             cur_frm.doc.items.forEach(item => {\n//                 let reference = item.interbank_reference;\n//                 console.log(\"reference\",reference)\n\n//                 // Check if the reference already exists in external_links_found\n//                 let existing = externalLinks.find(link => link.doctype === \"InterBank\" && link.doctype === reference);\n\n//                 if (existing) {\n//                     // Increment the count\n//                     existing.count += 1;\n//                 } else {\n//                     // Add new object if it doesn't exist\n//                     externalLinks.push({\n//                         doctype: \"InterBank\",\n                \n//                         open_count: 1,  // Initialize open_count if needed\n//                         count: 1\n//                     });\n//                 }\n//             });\n\n//             // Log the updated external_links_found for verification\n//             console.log(cur_frm.dashboard_data.count.external_links_found);\n//         } else {\n//             console.error(\"cur_frm or its properties are not properly initialized.\");\n//         }\n//     }\n// });\n\n\n\n\n\n\n\nfrappe.ui.form.on('Request interbank', {\n    refresh(frm) {\n        // Ensure dashboard data is available\n        // if (!cur_frm.dashboard_data) {\n        //     console.error(\"Dashboard data is not initialized.\");\n        //     return;\n        // }\n        // externalLinks = []\n        let externalLinks = cur_frm.dashboard_data.count.external_links_found || [];\n        console.log(\"externalLinks :\", externalLinks);\n        // externalLinks.push(Links)\n        console.log(\"externalLinks :\", typeof(externalLinks));\n         for (let l in externalLinks){\n             console.log('l',l);\n              console.log('lreference ',l.reference);                    \n              console.log('lreference type ',typeof(l.reference));\n\n                              \n                              \n           \n            }\n        // Iterate through the items in the form\n        (frm.doc.items || []).forEach(item => {\n            let reference = item.interbank_reference;\n            console.log(\"Processing reference:\", reference);\n        // if (reference) {\n            // Check if the reference already exists in external_links_found\n           \n             let existing = externalLinks.find(link => link.reference === reference);\n            \n            // console.log('reference',typeof(reference)link.referenc);\n             console.log('existing',existing);\n                    // Debugging logs for comparisons\n\n                if (existing) {\n                     console.log('yessssssssssssssssssssssssssssssss');\n                    // Increment the count if the reference exists\n                    existing.count += 1;\n                    console.log(`Incremented count for reference ${reference}:`, existing.count);\n                } else {\n                    // Add a new object if the reference doesn't exist\n                    console.log('nooooooooooooooooooooooooooooooooo');\n                    externalLinks.push({\n                        doctype: \"InterBank\",\n                        reference: reference,\n                        open_count: 1,  // Initialize open_count if needed\n                        count: 1\n                    });\n                     console.log('ffffffffffffffffffffffffff',externalLinks);\n                       let existing = externalLinks.find(link => link.reference === reference);\n                         console.log('existing fffffffffff',existing);\n                    document.querySelectorAll(\".document-link-badge\").forEach((el) => {\n            const dataDoctype = el.getAttribute(\"data-doctype\");\n\n            if (dataDoctype === \"InterBank\") {\n                let badgeLink = el.querySelector(\".badge-link\");\n                if (badgeLink) {\n                    let reference = badgeLink.textContent.trim();\n                    console.log(\"Badge link reference:\", reference);\n                    Array.from(el.children).forEach(child => {\n                    // Remove the 'hidden' class and add 'inline' and 'block' classes\n                    child.classList.remove(\"hidden\");\n                    child.classList.add(\"block\");\n                    let c =  el.querySelector(\".count\");\n                     c.innerText = existing.count\n                    console.log(\"Added 'inline' and 'block' classes to child:\", child);\n                });\n\n//                 // Get the reference for the count (interbank_reference)\n//                 let reference = el.querySelector(\".badge-link\").textContent.trim();\n           \n//               console.log(\"reference\",reference)\n//                 if (reference) {\n//                     // Get the count element inside .document-link-badge\n//                     let countElement = el.querySelector(\".count\");\n//                     console.log(\"sssssss\",existing.count)\n\n//                     // Push the count into the <span class=\"count\"> element\n//                     if (countElement) {\n//                         countElement.innerText = existing.count;  // Update the count text\n//                         console.log(\"Updated count to:\", existing.count);\n//                     }\n//                 }\n\n\n\n                    // Find the matching count for this reference\n                    let matchingLink = externalLinks.find(link => link.reference === reference);\n                    if (matchingLink) {\n                        let countElement = el.querySelector(\".count\");\n                        if (countElement) {\n                            // Update the count in the DOM\n                            countElement.innerText = matchingLink.count;\n                             countElement.classList.remove(\"hidden\");\n                             countElement.classList.add(\"block\");\n                              countElement.innerText =\"allah\"\n                            console.log(` countElement`,  countElement);\n                        } else {\n                            console.warn(`Count element not found for reference ${reference}.`);\n                        }\n                    } else {\n                        console.warn(`No matching link found for reference ${reference}.`);\n                    }\n                } else {\n                    console.warn(\"Badge link not found in the current element.\");\n                }\n            }\n        });\n                    console.log(`Added new reference ${reference} to external_links_found.`);\n                }\n            // }\n        });\n\n        // Update the DOM badges for external links\n        \n\n        // Log the final state of external_links_found\n        console.log(\"Updated external_links_found:\", externalLinks);\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request interbank",
  "enabled": 0,
  "modified": "2024-11-22 20:04:05.642628",
  "module": null,
  "name": "Disply actio plus connection btn",
  "script": "\nfrappe.ui.form.on(\"Request interbank\", {\n    refresh(frm) {\n\ndocument.querySelectorAll(\".document-link\").forEach((el) => {\n    const dataDoctype = el.getAttribute(\"data-doctype\");\n\n    if (dataDoctype === \"InterBank\") {\n        // Loop through each child of the current element (el)\n        Array.from(el.children).forEach(child => {\n            // Remove the 'hidden' class and add 'inline' and 'block' classes\n            child.classList.remove(\"hidden\");\n            child.classList.add(\"inline\", \"block\");\n            console.log(\"Added 'inline' and 'block' classes to:\", child);\n        });\n    }\n});\n\n\n\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request interbank",
  "enabled": 0,
  "modified": "2024-11-25 17:52:20.789203",
  "module": null,
  "name": "Frappe Client",
  "script": "frappe.ui.form.on('Request interbank', {\n    refresh: function (frm) {\n        // Add a custom button\n        frm.add_custom_button(\"Frappe Client\", function () {\n            frappe.call({\n                method: \"teller.get_branch_req_ib.get_branch\",\n                callback: function (r) {\n                    if (r && r.message) {\n                        // Display fetched data\n                        frappe.msgprint(__(\"Frappe Client Response: \" , JSON.stringify(r.message)));\n                        console.log(\"Response:\", r.message);\n                    } else {\n                        frappe.msgprint(__(\"No data fetched\"));\n                    }\n                }\n            });\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Branch Connecting",
  "enabled": 0,
  "modified": "2025-01-26 10:22:24.065560",
  "module": null,
  "name": "branches connection status list",
  "script": "frappe.listview_settings['Branch Connecting'] = {\r\n    get_indicator(doc) {\r\n        // Customize indicator color for each connection\r\n        if (doc.connection == \"Connected\") {\r\n            return [__(\"Connected\"), \"blue\", \"connection,=,Connected\"];\r\n        } else if (doc.connection == \"DisConnected\") {\r\n            return [__(\"DisConnected\"), \"red\", \"connection,=,DisConnected\"];\r\n        }\r\n    \r\n    },\r\n};\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "InterBank",
  "enabled": 0,
  "modified": "2024-12-17 13:39:06.410911",
  "module": null,
  "name": "ended status for interbank",
  "script": "// frappe.ui.form.on('InterBank', {\n// \trefresh(frm) {\n// \t    var current_day = frappe.datetime._date();\n// \t    var current_time = frappe.datetime.now_time();\n// \t    var type = frm.doc.type;\n// \t    var interbankDay = frm.doc.date;\n// \t   // var stopWatch = '00:00:00';\n// \t     var stopWatch = '11:46:00'\n// \t\t// your code here'\n// \t\tif(type == 'Daily' && current_day == interbankDay ){\n// \t\t  //  in the end of day \n// \t\t  frappe.msgprint(`hey King!`)\n// \t\t  frm.set_value('status','Ended')\n// \t\t}\n\n// \t}\n// })\n\n\nfrappe.ui.form.on('InterBank', {\n    refresh(frm) {\n        var current_day = frappe.datetime._date();  // Current date in YYYY-MM-DD format\n        var current_time = frappe.datetime.now_time();  // Current time in HH:MM:SS format\n        var type = frm.doc.type;\n        var interbankDay = frm.doc.date;  // The date stored in the document\n        var stopWatch = '11:56:00';  // End of the day time (you can adjust this as needed)\n\n        // Check if the type is 'Daily' and the interbankDay matches the current day\n        if (type == 'Daily' && current_day == interbankDay) {\n            // Check if the current time has reached or passed the specified end time (stopWatch)\n            if (current_time == stopWatch) {\n                frappe.msgprint(`Hey King! The status is being updated.`); // Message for confirmation\n                frm.set_value('status', 'Ended'); // Set the status to 'Ended'\n                frm.save(); // Save the form after updating the status\n            }\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "InterBank",
  "enabled": 0,
  "modified": "2025-01-26 10:27:32.879915",
  "module": null,
  "name": "currency code validation",
  "script": "\nfrappe.ui.form.on('InterBank Details', {\n    currency_code(frm, cdt, cdn) {\n        var d = locals[cdt][cdn];  \n        var currency_code = d.currency_code; \n        var table = frm.doc.interbank;  \n        var duplicated = false; \n        for (let row of table) {\n            if (row.currency_code === currency_code && row.name !== d.name) {\n                duplicated = true;\n                break;\n            }\n        }\n        \n        if (duplicated) {\n            frappe.msgprint(__(`Currency code  ${d.currency_code} appears more than one time`));\n            d.currency_code = ''; \n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "InterBank",
  "enabled": 0,
  "modified": "2024-12-30 22:29:08.303513",
  "module": null,
  "name": "set property on child table for status On Sent",
  "script": "\nfrappe.ui.form.on('InterBank', {\n\tsend_mail(frm) {\n\t\t\tif(frm.doc.status == 'On Sent'){\n            frm.fields_dict['interbank'].grid.update_docfield_property('rate','read_only',0);\n            frm.fields_dict['interbank'].grid.update_docfield_property('rate','reqd',1);\n            cur_frm.refresh_field(\"interbank\");\n\n\t\t}else{  frm.fields_dict['interbank'].grid.update_docfield_property('rate','read_only',1);\n            frm.fields_dict['interbank'].grid.update_docfield_property('rate','reqd',1);}\n\t\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "InterBank",
  "enabled": 0,
  "modified": "2024-12-30 12:52:43.976284",
  "module": null,
  "name": "workflow state",
  "script": "frappe.ui.form.on('InterBank', {\n\tbefore_workflow_action(frm) {\n\t\t// your code here\n\t\t\tconsole.log(\"Action :\",cur_frm.doc.workflow_state)\n\t\tconsole.log(\"state :\",cur_frm.doc.workflow_state)\n\t\tif(cur_frm.doc.workflow_state == 'watting for Reply'){\n\t\t    frm.set_value('status','Submitted')\n\t\t}\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "InterBank",
  "enabled": 0,
  "modified": "2024-12-30 16:37:17.745262",
  "module": null,
  "name": "rate validation",
  "script": "frappe.ui.form.on('InterBank', {\n    validate(frm) {\n        // Iterate through the rows in 'interbank' child table\n        frm.doc.interbank.forEach(function(row) {\n            if (!row.rate) {\n                frappe.throw('Please enter a rate for all rows.');\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "InterBank",
  "enabled": 0,
  "modified": "2025-01-26 10:26:55.355161",
  "module": null,
  "name": "InterBank Details Calculate Amount",
  "script": "frappe.ui.form.on('InterBank', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})\nfrappe.ui.form.on(\"InterBank Details\", {\n  qty(frm, cdt, cdn) {\n    calculate_total(frm, cdt, cdn);\n  },\n  rate(frm, cdt, cdn) {\n    calculate_total(frm, cdt, cdn);\n  },\n});\n\nfunction calculate_total(frm, cdt, cdn) {\n  var d = locals[cdt][cdn];\n  frappe.model.set_value(cdt, cdn, \"amount\", d.rate * d.qty);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "InterBank",
  "enabled": 0,
  "modified": "2025-01-26 10:25:52.050109",
  "module": null,
  "name": "Fetch Currency  based on custom_currency_code",
  "script": "frappe.ui.form.on(\"InterBank Details\", {\n  currency_code(frm, cdt, cdn) {\n    var row = locals[cdt][cdn];\n    frappe.call({\n      method: \"frappe.client.get_list\",\n      args: {\n        doctype: \"Currency\",\n        fields: [\"name\", \"custom_currency_code\"],\n        filters: [[\"custom_currency_code\", \"=\", row.currency_code]],\n      },\n      callback: function (response) {\n        let currencies = response.message || [];\n        // console.log(\"Fetched currencies:\", currencies);\n\n        // Assuming you need to update something based on these currencies\n        if (currencies.length > 0) {\n          // Update the form field with the first currency's details as an example\n          let currency = currencies[0]; // Take the first matched currency\n          // console.log(\"Selected currency:\", currency);\n\n          // Example: Update a field in the current row\n          frappe.model.set_value(cdt, cdn, \"currency\", currency.name);\n\n          // Optionally, you can set additional fields if needed\n          // frappe.model.set_value(cdt, cdn, \"another_field\", currency.another_field);\n        } else {\n          console.log(\"No matching currencies found.\");\n        }\n      },\n    });\n  },\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "InterBank",
  "enabled": 0,
  "modified": "2025-01-26 10:23:34.688719",
  "module": null,
  "name": "btn send mail",
  "script": "frappe.ui.form.on(\"InterBank\", {\n  send_mail: function (frm) {\n  \n    if(frm.doc.status !== 'On Sent' && frm.doc.status !== 'Deal' && frm.doc.status !== 'Closed' && frm.doc.status !== 'Ended' && frm.doc.status !== 'Paused'){\n        console.log(\"status will changed to Send \")\n          frm.set_value('status', 'On Sent');\n          frm.save();\n        \n//           \tif(frm.doc.status == 'On Sent'){\n         \n\n// \t\t}else{  frm.fields_dict['interbank'].grid.update_docfield_property('rate','read_only',1);\n//             frm.fields_dict['interbank'].grid.update_docfield_property('rate','reqd',1);}\n    }else{\n          console.log(\"status will not changed to Send \");\n        return;\n    }\n    // frm.save(); // Save the form to persist the change\n  },\n  refresh(frm){\n      if(frm.doc.status == 'On Sent' && frm.doc.docstatus === 0){\n            frm.fields_dict['interbank'].grid.update_docfield_property('rate','read_only',0);\n            frm.fields_dict['interbank'].grid.update_docfield_property('rate','reqd',1);\n            cur_frm.refresh_field(\"interbank\");\n      }else{\n      frm.fields_dict['interbank'].grid.update_docfield_property('rate','read_only',1);\n      frm.fields_dict['interbank'].grid.update_docfield_property('rate','reqd',1);\n\n\n      }\n        \n  }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "InterBank",
  "enabled": 0,
  "modified": "2025-01-26 10:25:46.113150",
  "module": null,
  "name": "add row trigger",
  "script": "frappe.ui.form.on('InterBank', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n});\n\nfrappe.ui.form.on('InterBank Details', {\n\tinterbank_add(frm,cdt,cdn) {\n\t\t// your code here\n// \t\tfrappe.msgprint(\"king mina\")\n\t\tvar d = locals[cdt][cdn];\n\t\tvar duplicated =  false;\n\t\tvar table = frm.doc.interbank;\n\t\tfor(let row of table){\n\t\t    if (row.currency_code == d.currency_code && row.name != d.name){\n\t\t        duplicated =true;\n\t\t    }else{\n\t\t        return;\n\t\t    }\n\t\t    if(duplicated){\n\t\t        frappe.throw(`Row ${d.idx} is duplicated`);\n\t\t    }\n\t\t}\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "InterBank",
  "enabled": 0,
  "modified": "2025-01-26 10:23:08.251343",
  "module": null,
  "name": "add_fetch",
  "script": "frappe.ui.form.on('InterBank', {\n\trefresh(frm) {\n\t\t// your code here\n\t\t\n\t\tcur_frm.set_value('customer','البنك الاهلي');\n\tlet currentUser = frappe.session.logged_in_user;\n// \tlet user = frappe.user_info().email;\n\t\t\tcur_frm.set_value('user',currentUser);\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request interbank",
  "enabled": 0,
  "modified": "2025-01-26 10:18:35.558939",
  "module": null,
  "name": "fetch cur depend on code in childtable Request interbank Details",
  "script": "\n\nfrappe.ui.form.on('Interbank Request Details', {\n  currency_code(frm, cdt, cdn) {\n    var row = locals[cdt][cdn];\n    frappe.call({\n      method: \"frappe.client.get_list\",\n      args: {\n        doctype: \"Currency\",\n        fields: [\"name\", \"custom_currency_code\"],\n        filters: [[\"custom_currency_code\", \"=\", row.currency_code]],\n      },\n      callback: function (response) {\n        let currencies = response.message || [];\n        // console.log(\"Fetched currencies:\", currencies);\n\n        // Assuming you need to update something based on these currencies\n        if (currencies.length > 0) {\n          // Update the form field with the first currency's details as an example\n          let currency = currencies[0]; // Take the first matched currency\n          // console.log(\"Selected currency:\", currency);\n\n          // Example: Update a field in the current row\n          frappe.model.set_value(cdt, cdn, \"currency\", currency.name);\n\n          // Optionally, you can set additional fields if needed\n          // frappe.model.set_value(cdt, cdn, \"another_field\", currency.another_field);\n        } else {\n          console.log(\"No matching currencies found.\");\n        }\n      },\n    });\n  },\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "InterBank",
  "enabled": 0,
  "modified": "2025-01-02 16:45:58.956319",
  "module": null,
  "name": "test btn",
  "script": "frappe.ui.form.on('InterBank', {\n    refresh(frm) {\n        frm.add_custom_button(\n            __(\"Validate InterBank\"),\n            function () {\n                frappe.call({\n                    method: \"teller.validate_time.cron_validate_interbank_time\",\n                    callback: function(response) {\n                        if (response.message) {\n                            // frappe.msgprint(__('Validation Successful: ') + response.message);\n                            console.log(\"message\", response.message)\n                        } else {\n                            frappe.msgprint(__('No message returned.'));\n                        }\n                    },\n                    error: function(err) {\n                        frappe.msgprint(__('An error occurred: ') + err.message);\n                    }\n                });\n            }\n        );\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Teller Invoice",
  "enabled": 0,
  "modified": "2025-01-21 14:49:49.686215",
  "module": null,
  "name": "get item from",
  "script": "frappe.ui.form.on('Teller Invoice', {\n  client_type: function(frm) {\n      \n      if(frm.doc.client_type === \"Interbank\"){\n      \n      frm.add_custom_button(\n      __(\"Booking Interbank\"),\n      function () {\n        // Validate client type\n        if (!frm.doc.client_type || frm.doc.client_type !== 'Interbank') {\n          frappe.throw({title: __(\"Mandatory\"), message: __(\"Please Select a Client Type Interbank sssssssssssssss\")});\n        } else {\n          frm.clear_table(\"transactions\");\n        }\n\n        // Define query arguments\n        let query_args = {\n          filters: { docstatus: [\"!=\", 2] }\n        };\n\n        // Initialize MultiSelectDialog\n        let dialog = new frappe.ui.form.MultiSelectDialog({\n          doctype: \"Booking Interbank\",\n          target: frm,\n          setters: {\n            transaction: 'Selling',\n            branch: null,\n            customer: 'الاهلي',\n          },\n          add_filters_group: 1,\n               allow_child_item_selection: 1,\n    child_columns: [\"currency\",\"qty\",\"rate\"],\n    child_fieldname:\"booked_currency\",\n          date_field: \"date\",\n          columns: [\"name\", \"transaction\", \"status\", \"date\"],\n          get_query() {\n            return query_args;\n          },\n          action(selections) {\n            selections.forEach(function(booking_ib) {\n              if (booking_ib) {\n                frappe.call({\n                  method: \"frappe.client.get\",\n                  args: {\n                    doctype: \"Booking Interbank\",\n                    filters: {\n                      name: booking_ib\n                    }\n                  },\n                  callback: function(response) {\n                    if (response && response.message) {\n                      response.message.booked_currency.forEach(function(item) {\n                                                    // console.log(\"inside\")\n\n                        let child = frm.add_child(\"transactions\");\n                        child.code = item.currency_code;\n                        child.currency_code=item.currency;\n                        \n                        // let row = locals[cdt][cdn];\n        // console.log(\"Current row data:\", row);\n\n        if (item.currency_code) {\n            console.log(\"Code entered:\", item.currency_code);\n\n            // Step 1: Fetch User Permissions for Accounts\n            frappe.call({\n                method: \"frappe.client.get_list\",\n                args: {\n                    doctype: \"User Permission\",\n                    filters: {\n                        user: \"andrew@datasofteg.com\",//frappe.session.user, // Filter by the current user\n                        allow: \"Account\" // Ensure permissions are for the Account doctype\n                    },\n                    fields: [\"for_value\"]\n                },\n                callback: function(permissionResponse) {\n                    console.log(\"User Permission response:\", permissionResponse);\n\n                    if (permissionResponse.message && permissionResponse.message.length > 0) {\n                        let userAccounts = permissionResponse.message.map(record => record.for_value);\n                        console.log(\"Accounts from User Permission:\", userAccounts);\n\n                        // Step 2: Check each user-permitted account for matching custom_currency_code\n                        frappe.call({\n                            method: \"frappe.client.get_list\",\n                            args: {\n                                doctype: \"Account\",\n                                filters: {\n                                    parent_account: [\"in\", userAccounts], // Accounts must be under the parent_account from User Permission\n                                    custom_currency_code:item.currency_code // Match custom_currency_code with the entered code\n                                },\n                                fields: [\"name\", \"custom_currency_code\", \"parent_account\",\"account_currency\"]\n                            },\n                            callback: function(accountResponse) {\n                                console.log(\"Account fetch response:\", accountResponse);\n\n                                if (accountResponse.message && accountResponse.message.length > 0) {\n                                    let matchingAccount = accountResponse.message[0]; // Use the first match\n                                    console.log(\"Matching Account Found:\", matchingAccount);\n\n                                    // Set the account name in the paid_from field\n                                    // frappe.model.set_value(cdt, cdn, \"paid_from\", matchingAccount.name);\n                                     child.paid_from =  matchingAccount.name;\n                                     child.currency_code= matchingAccount.account_currency;\n                                      frm.refresh_field(\"transactions\");\n                                } else {\n                                    console.log(`No matching Account found for code: ${item.currency_code}`);\n                                    frappe.msgprint(`No matching Account found for code: ${item.currency_code}`);\n                                    // frappe.model.set_value(cdt, cdn, \"paid_from\", null); // Clear the field\n                                    \n                                }\n                            }\n                        });\n                    } else {\n                        console.log(\"No User Permissions found for Accounts.\");\n                        frappe.msgprint(\"No User Permissions found for Accounts.\");\n                        // frappe.model.set_value(cdt, cdn, \"paid_from\", null); // Clear the field\n                    }\n                }\n            });\n        } else {\n            console.log(\"Code field is empty. No action taken.\");\n        }\n                        child.usd_amount = item.qty;\n                        child.rate = item.rate;\n                        child.total_amount=item.qty* item.rate;\n                        child.booking_interbank= response.message.name;\n                      });\n                      frm.refresh_field(\"transactions\");\n                      dialog.hide();\n                    }\n                  }\n                });\n              }\n            });\n          }\n        });\n\n        dialog.show();\n      },\n      __(\"Get Items From\")\n    );\n    \n      }\n  }\n});",
  "view": "Form"
 }
]